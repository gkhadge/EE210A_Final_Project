%% plots.m
%  Authors: Gourav Khadge, Jason Zheng
%  
%  This script contains sections of code which can be run to generate a
%  variety of plots using saved data, acquired in main.m. Each section is 
%  marked by a "%%" header, which describes the plots generated by that 
%  section.

%% SINGLE DATA FILE PLOTS BELOW (extracted from single files)

%% Confidence Plots
% Plots the confidence box-plots for a single file for each of the words
% Outputs one figure for training data and another figure for testing data

% Test to be loaded
topology = 'Ergodic'; % Topology, "Linear" or "Ergodic"
Nstate = 'N8'; % Number of Markov States
Fvector = 'F2'; % Number of features

% Load file
filename = [topology,'_',Nstate,'_',Fvector,'_data.mat'];
load(filename);

figure
hold all
boxplot_groupings = zeros(size(overall_confidence));
for i=1:length(word_strings)
%     boxplot_groupings(strcmp(overall_word_labels,word_strings(i))) = i;
    boxplot_groupings(strcmp(word_labels,word_strings(i)),:) = i;
%     plot(i*ones(size(conf_i)),conf_i,'x')
end

boxplot(overall_confidence(:),boxplot_groupings(:),'Labels',word_strings)
grid on
ylabel('Confidence')
title('Confidence of Word Classification (Testing Data)')
filename = ['ConfBoxPlot_Testing_',topology,'_',Nstate,'_',Fvector];
saveas(gcf,filename,'epsc')

figure
hold all
boxplot_groupings_train = zeros(size(overall_confidence_train));
for i=1:length(word_strings)
%     boxplot_groupings(strcmp(overall_word_labels,word_strings(i))) = i;
    boxplot_groupings_train(strcmp(word_labels_train,word_strings(i)),:) = i;
%     plot(i*ones(size(conf_i)),conf_i,'x')
end

boxplot(overall_confidence_train(:),boxplot_groupings_train(:),'Labels',word_strings)
grid on
ylabel('Confidence')
title('Confidence of Word Classification (Training Data)')

%% Error Rate Histogram Plots
% Plots the error rate histogram plots for a single file
% Outputs one figure for training data and another figure for testing data
% Also prints out mean error rates for testing and training data

% Test to be loaded
topology = 'Ergodic'; % Topology, "Linear" or "Ergodic"
Nstate = 'N8'; % Number of Markov States
Fvector = 'F2'; % Number of features

% Load file
filename = [topology,'_',Nstate,'_',Fvector,'_data.mat'];
load(filename);

figure
histogram(error_rates)
xlabel('Error Rate')
ylabel('Instances')
title('Error Rate Histogram (Testing Data)')

figure
histogram(error_rates_train)
xlabel('Error Rate')
ylabel('Instances')
title('Error Rate Histogram (Training Data)')

disp(['Mean Error Rate (Training): ',num2str(mean(error_rates_train))])
disp(['Mean Error Rate (Testing): ',num2str(mean(error_rates))])

%% Confusion Matrix Plots
% Plots the confusion matrix plots for a single file
% Outputs one figure for training data and another figure for testing data
% Also prints out average confusion matrix

% Test to be loaded
topology = 'Ergodic'; % Topology, "Linear" or "Ergodic"
Nstate = 'N8'; % Number of Markov States
Fvector = 'F2'; % Number of features

% Load file
filename = [topology,'_',Nstate,'_',Fvector,'_data.mat'];
load(filename);

figure
imshow(average_confusion_matrix, 'InitialMagnification',10000)  % # you want your cells to be larger than single pixels

colormap(gca, hot) % # to change the default grayscale colormap 
% colormap(gca, jet) % # to change the default grayscale colormap 
colorbar
axis on
set(gca, 'XTickLabel',word_strings, 'XTick',1:numel(word_strings))
set(gca, 'YTickLabel',word_strings, 'YTick',1:numel(word_strings))
xlabel('Predicted Label')
ylabel('True Label')
title('Confusion Matrix: Word Identification (Testing Data)')

figure
imshow(average_confusion_matrix_train, 'InitialMagnification',10000)  % # you want your cells to be larger than single pixels

colormap(gca, hot) % # to change the default grayscale colormap
% colormap(gca, jet) % # to change the default grayscale colormap 
colorbar
axis on
set(gca, 'XTickLabel',word_strings, 'XTick',1:numel(word_strings))
set(gca, 'YTickLabel',word_strings, 'YTick',1:numel(word_strings))
xlabel('Predicted Label')
ylabel('True Label')
title('Confusion Matrix: Word Identification (Training Data)')

disp('Average Confusion Matrix (Training Data)')
disp(average_confusion_matrix_train)
disp('Average Confusion Matrix (Testing Data)')
disp(average_confusion_matrix)

%% METADATA PLOTS BELOW (extracted from multiple files)

%% Plots Error Rate vs. Number of States 
%  This section loads saved data for tests with varying numbers of states
%  with a feature vector length of 2,  and a linear topology
%  Error rate is plotted for testing risk and empirical risk


states = [1:16,20];
num_states = length(states);
% load('Linear_N3_F2_data.mat');
errors = zeros(num_states,1);
errors_train = zeros(num_states,1);

% Extract data from each of the files
for i = 1:num_states
    filename = ['Linear_N',num2str(states(i)),'_F2_data.mat'];
    load(filename);
    errors(i) = mean(error_rates);
    errors_train(i) = mean(error_rates_train);
end
figure
hold all
plot(states,errors,'rx-')
plot(states,errors_train,'b.-')
legend('Testing Data Error Rate','Training Data Error Rate')
title('Error Rate vs. Numbers of HMM States')
xlabel('Number of HMM States')
ylabel('Average Error Rate')

% topology = 'Linear';
% Nstate = 'N8';
% Fvector = 'F2';
% filename = ['ErrRateVsHMMstates_',topology,'_',Fvector];
% saveas(gcf,filename,'epsc')

%% Plots Error Rate vs. Number of Features 
%  This section loads saved data for tests with varying numbers of features
%  with 10 states, and a linear topology
%  Error rate is plotted for testing risk and empirical risk

featureNs = 1:7;
num_featureNs = length(featureNs);
% load('Linear_N3_F2_data.mat');
errors = zeros(num_featureNs,1);
errors_train = zeros(num_featureNs,1);

% Extract data from each of the files
for i = 1:num_featureNs
    filename = ['Linear_N10_F',num2str(i),'_data.mat'];
    load(filename);
    errors(i) = mean(error_rates);
    errors_train(i) = mean(error_rates_train);
end
figure
hold all
plot(featureNs,errors,'rx-')
plot(featureNs,errors_train,'b.-')
legend('Testing Data Error Rate','Training Data Error Rate')
title('Error Rate vs. Numbers of Features')
xlabel('Numbers of Features')
ylabel('Average Error Rate')

% topology = 'Linear';
% Nstate = 'N10';
% filename = ['ErrRateVsNumFeatures_',topology,'_',Nstate];
% saveas(gcf,filename,'epsc')

%% Plots Error Rate vs. Topology over number of states 
%  This section loads saved data for tests with ergodic and linear
%  topologies as the number of states is varied, with feature vector length
%  of 2. 

states_Ergodic = [1:6,10];
states_Linear = [1:16,20];
num_states_Ergodic = length(states_Ergodic);
num_states_Linear = length(states_Linear);
% load('Linear_N3_F2_data.mat');
errorsLinear = zeros(num_states_Linear,1);
errorsLinear_train = zeros(num_states_Linear,1);
errorsErgodic = zeros(num_states_Ergodic,1);
errorsErgodic_train = zeros(num_states_Ergodic,1);


% Extract data from each of the Linear topology files
for i = 1:num_states_Linear
    filename = ['Linear_N',num2str(states_Linear(i)),'_F2_data.mat'];
    load(filename);
    errorsLinear(i) = mean(error_rates);
    errorsLinear_train(i) = mean(error_rates_train);
    
end

% Extract data from each of the ergodic topolgy files
for i = 1:num_states_Ergodic
    
    filename = ['Ergodic_N',num2str(states_Ergodic(i)),'_F2_data.mat'];
    load(filename);
    errorsErgodic(i) = mean(error_rates);
    errorsErgodic_train(i) = mean(error_rates_train);
    
end
figure
hold all
plot(states_Linear,errorsLinear,'rx-')
plot(states_Linear,errorsLinear_train,'r.-')
plot(states_Ergodic,errorsErgodic,'bx-')
plot(states_Ergodic,errorsErgodic_train,'b.-')
legend('Testing Data Error Rate (Linear)','Training Data Error Rate (Linear)','Testing Data Error Rate (Ergodic)','Training Data Error Rate (Ergodic)')
title('Error Rate with Linear and Ergodic Topologies')
xlabel('Number of HMM States')
ylabel('Average Error Rate')
% 
% Nstate = 'N10';
% Fvector = 'F2';
% filename = ['ErrRateVsTopology_',Nstate,'_',Fvector];
% saveas(gcf,filename,'epsc')